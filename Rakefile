# frozen_string_literal: true
require 'rake/testtask'
require 'getclonedata'

task :default do
  puts `rake -T`
end

Rake::TestTask.new(:spec) do |t|
  t.pattern = 'spec/*_spec.rb'
  t.warning = false
end

namespace :run do
  task :dev do
    sh 'rerun "rackup -p 9292"'
  end

  task :test do
    loop do
      puts 'Setting up test environment'
      ENV['RACK_ENV'] = 'test'
      Rake::Task['db:_setup'].execute
      Rake::Task['db:reset'].execute
      puts 'Populating test database'
      LoadDeveloper.call('rjollet')
      sh 'rerun "rackup -p 3000"'
    end
  end
end

namespace :db do
  task :_setup do
    require 'sequel'
    require_relative 'init'
    Sequel.extension :migration
  end

  desc 'Run database migrations'
  task migrate: [:_setup] do
    puts "Migrating to latest for: #{ENV['RACK_ENV'] || 'development'}"
    Sequel::Migrator.run(DB, 'db/migrations')
  end

  desc 'Reset migrations (full rollback and migration)'
  task reset: [:_setup] do
    Sequel::Migrator.run(DB, 'db/migrations', target: 0)
    Sequel::Migrator.run(DB, 'db/migrations')
  end

  desc 'Print out final schema to file'
  task schema: [:_setup] do
    DB.extension :schema_dumper
    File.open('db/schema.rb', 'w') do |file|
      header = <<~END
        # This schema file is automativally generated by `rake db:schema.
        # It will be overwritten peridodically so do not make changes.
      END
      puts 'Writing schema to db/schema.rb'
      file.write(header)
      file.write(DB.dump_schema_migration)
    end
  end
end

desc 'delete files or folders in casset or cloned repositories'
namespace :wipe do
  desc 'wipe cassettes'
  task :cassettes do
    sh 'rm spec/fixtures/cassettes/*.yml' do |ok, _|
      puts(ok ? 'Cassettes deleted' : 'No casseettes found')
    end
  end

  desc "wipe clones repositories"
  task :repos do
    GetCloneData::ClonedRepo.wipe
  end
end

namespace :quality do
  CODE = 'app.rb'

  desc 'run all quality checks'
  task all: [:spec, :rubocop, :flog, :flay]

  task :flog do
    sh 'flog ./'
  end

  task :flay do
    sh 'flay'
  end

  task :rubocop do
    sh 'rubocop'
  end
end
